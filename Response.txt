服务器响应

1) onreadystatechange

该readyState属性保留XMLHttpRequest的状态。

该onreadystatechange属性定义当readyState更改时要执行的函数。

该status属性和该statusText属性保存XMLHttpRequest对象的状态。

Property			Description

onreadystatechange	Defines a function to be called when the readyState property changes

readyState		Holds the status of the XMLHttpRequest.
			0: request not initialized
			1: server connection established
			2: request received
			3: processing request
			4: request finished and response is ready

status			200: "OK"
			403: "Forbidden"
			404: "Page not found"
			For a complete list go to the Http Messages Reference

statusText			Returns the status-text (e.g. "OK" or "Not Found")


onreadystatechange每当readyState更改时，都会调用该函数。

当readyState值为4且status 为200时，response已准备就绪：

例子：

function loadDoc() {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("demo").innerHTML =
      this.responseText;
    }
  };
  xhttp.open("GET", "ajax_info.txt", true);
  xhttp.send();
}

2) 使用callback回调函数

回调函数是作为参数传递给另一个函数的函数。

如果网站中有多个AJAX任务，则应创建一个用于执行该XMLHttpRequest对象的函数，并为每个AJAX任务创建一个回调函数。

例子：

loadDoc("url-1", myFunction1);

loadDoc("url-2", myFunction2);

function loadDoc(url, cFunction) {
  var xhttp;
  xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      cFunction(this);
    }
  };
  xhttp.open("GET", url, true);
  xhttp.send();
}

function myFunction1(xhttp) {
  // action goes here
}
function myFunction2(xhttp) {
  // action goes here
}

3) responseText 将服务器response 作为JavaScript字符串返回

document.getElementById("demo").innerHTML = xhttp.responseText;


4) responseXML  将服务器响应作为XML DOM对象返回

5) getAllResponseHeaders() 返回 response的 header 信息

6) getResponseHeader() 返回response中特定的header信息













